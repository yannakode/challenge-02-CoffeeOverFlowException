openapi: 3.0.1
info:
  title: Product Microservice
  version: v1
  description: Microservice created for the second challenge of the Compass UOL scholarship program.
  termsOfService: http://swagger.io/terms/
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
servers:
- url: http://localhost:8080
  description: Generated server url
tags:
  - name: Products route
    description: Product management
paths:
  /products/{id}:
    put:
      tags:
        - Products route
      summary: Updates existing products
      description: Update an existing product by id
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequestDto'
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND
        "409":
          description: CONFLICT
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductResponseDto'
  /products:
    get:
      tags:
        - Products route
      summary: View all products
      description: Display all products registered in the database
      operationId: getAllProducts
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductResponseDto'
    post:
      tags:
      - Products route
      summary: Insert new products
      description: Insert new product into the database
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequestDto'
        required: true
      responses:
        "200":
          description: OK
        "400":
          description: BAD REQUEST
        "404":
          description: NOT FOUND
        "409":
          description: CONFLICT
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductResponseDto'
  /products/{productId}:
    get:
      tags:
        - Products route
      summary: Search products by id
      description: Search for product in the database by id
      operationId: getProductById
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
        "404":
          description: NOT FOUND
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ProductResponseDto'
    delete:
      tags:
        - Products route
      summary: Delete products
      operationId: Delete product in the database by id
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
components:
  schemas:
    ProductRequestDto:
      type: object
      properties:
        name:
          type: string
        value:
          type: number
          format: double
        description:
          type: string
    ProductResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        value:
          type: number
          format: double
        description:
          type: string
